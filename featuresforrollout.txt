Here are the features we are going to roll out in out final production of this project
1. Stock_data_fetching
  we will use yahoo y finance library that will the fetch the stock historical data using requests library
  Data we will be fetching -
  Stock_open = the stock open refers to price of the stock at the beginning of the trading day
  Stock_high = the stock open refers to highest price of the stock in an specific time period such as intraday
  Stock_low = can be understood from above
  Stock_close= can be understood form above
  Volume = the total shares of that stock traded on that day
  Adj. close_price= The adjusted close price is the closing price of a stock, but it has been adjusted for events such as stock splits, dividends, or rights offerings.
  User_input = user will be able to input the ticker(NASDAQ SYMBOL) for that particular stock he/she wants to see the historical data
  Date_fetching = user will be able to set the time period for which he wants to fetch historical data.
2.Data Preprocessing and Calculations:
  Feature: Data cleaning and manipulation using pandas(will learn the library first from free code camp).
  Tasks:
  Handle missing data points (fill or drop missing values).
  Convert date columns into appropriate formats.
  Calculate technical indicators:(learn these technical indicators first then go )
  Simple Moving Average (SMA)
  Exponential Moving Average (EMA)
  Moving Average Convergence Divergence (MACD)
  Relative Strength Index (RSI)
  Bollinger Bands
  Volume Weighted Average Price (VWAP)
  Optionally: Add advanced indicators like the On-Balance Volume (OBV).
 
  now what is simple moving average?

  A Simple Moving Average (SMA) is a basic way to track the average price of a stock (or any asset) over 
  a specific period of time. It's called "moving" because it updates every day, or for whatever period you're 
  looking at, by dropping the oldest data point and adding the most recent one.
  
  now what is exponential moving average?
  The Exponential Moving Average (EMA) is a type of moving average that gives more weight to recent prices,
  making it more responsive to recent price changes compared to the Simple Moving Average (SMA).

  all the financial technical terms will go here
  
  3. Static Visualizations (Matplotlib/Seaborn):(learn matplotlib /seaborn from freecodecamp)
	Feature: Plot key static visualizations using matplotlib and seaborn.
	Visualizations:
	Stock Price Time Series: Line plot of stock's closing price over time.
	Correlation Heatmap: Correlation matrix between various stock indicators (SMA, EMA, RSI, etc.).
	Stock Returns Distribution: Histogram of daily returns.
	Volume Analysis: Plot volume over time alongside price

  4. Interactive Visualizations (Plotly):(again freecodecamp)
	Feature: Create interactive charts using plotly.
	Charts:
	Candlestick Chart: Interactive candlestick chart to view price action.
	Stock with Indicators: Plot stock price along with SMA, EMA, MACD, and other indicators in one chart.
	RSI and MACD Charts: Create charts to view the RSI and MACD indicators with buy/sell signal markers.
	Bollinger Bands: Plot the price along with upper and lower Bollinger Bands.

 5. Stock Analysis Dashboard (Streamlit):
	Feature: Create a simple interactive web app using streamlit.
	UI Features:
	Stock Symbol Input: Allow users to input a stock ticker.
	Date Range Selection: Let users specify a date range (default to last 1 year or 5 years).
	Indicator Selector: Add checkboxes to enable/disable different indicators like SMA, EMA, MACD, etc.
	Chart Display: Display the selected interactive charts (candlestick, stock performance, indicators).
	Stock Data Table: Show a table of the stock data fetched (Open, Close, Volume, etc.).


 6. Advanced Analysis:
	Feature: Include additional stock market metrics for deeper analysis.
	Metrics to Include:
	Volatility: Calculate and display stock volatility over a given time period.
	Sharpe Ratio: Measure risk-adjusted return.
	Max Drawdown: Track the largest peak-to-trough decline.
	Beta: Assess the stock's volatility relative to the market.

 7. Optimization and Performance:
	Feature: Optimize performance for handling large datasets.
	Tasks:
	Use numpy for efficient calculations and vectorized operations.
	Limit the number of data points fetched for large date ranges (pagination or chunking).
	Cache data (in streamlit) to reduce redundant fetching.

 8. User Experience Enhancements:
	Feature: Make the dashboard more user-friendly.
	Tasks:
	Include tooltips and descriptions for each feature (e.g., what SMA or MACD represents).
	Add dynamic titles and subtitles to the charts based on user input.
	Include error handling (e.g., invalid ticker symbol or network issues).
	Additional Considerations:
	GitHub Integration:
	Regular commits to track progress.
	Include a detailed README file explaining the project, features, and how to use the dashboard.
	Testing and Documentation:
	Write unit tests for key functions (e.g., indicator calculations, data fetching).
	Document the code well to make it easy to understand and modify.
